'use strict';

var Q = require('q');
var progres = require('./index.js');
var sql = require('sql');

var usersTable = sql.define({
	name: 'progres_temp_test_users',
	columns: [
		{name: 'id', dataType: 'SERIAL PRIMARY KEY'},
		{name: 'name', dataType: 'TEXT'}
	]
});

var connectionString = 'postgres://localhost';

[

	// Prepare table.
	function () {

		return progres.connect(connectionString, function (client) {

			return [

				function () {

					// Drop.
					return client.query(usersTable.drop().ifExists().toQuery());
				},
				function () {

					// Create.
					return client.query(usersTable.create().toQuery());
				},
				function () {

					// Insert.
					return client.query(usersTable.insert([
						{name: 'geon'},
						{name: 'neon'},
						{name: 'leon'},
						{name: 'peon'},
						{name: 'aeon'}
					]).toQuery());
				},
			]
				// Run in sequence.
				.reduce(function (soFar, next) { return soFar.then(next); }, Q());
		});
	},


	// Errors in the transaction should trigger a rollback.
	function () {

		return progres.transaction(connectionString, function (client) {

			// Delete all.
			return client.query(usersTable.delete().toQuery()).then(function () {

				// Fake an error.
				throw 'Force the transaction to rollback.';
			});

		}).then(function () {

			// This should never execute.
			throw new Error('Errors in the job should propagate.');

		}, function (error) {

			return progres.connect(connectionString, function (client) {

				// Are the rows still there?
				return client.query(usersTable.select().toQuery()).then(function (rows) {

					if (rows.length != 5) {

						throw new Error('Errors in the transaction should trigger a rollback.');
					}
				});
			});
		});
	},


	// No errors in the transaction should trigger a commit.
	function () {

		return progres.transaction(connectionString, function (client) {

			// Delete all.
			return client.query(usersTable.delete().toQuery());

		}).then(function () {

			return progres.connect(connectionString, function (client) {

				// Are the rows gone?
				return client.query(usersTable.select().toQuery()).then(function (rows) {

					if (rows.length) {

						throw new Error('No errors in the transaction should trigger a commit.');
					}
				});
			});
		});
	}
]
	// Run in sequence.
	.reduce(function (soFar, next) { return soFar.then(next); }, Q())
	.done(function () {

		console.log('Everything OK.');

	}, function (error) {

		console.error(error);
		process.exit(1);
	});
