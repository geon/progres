"use strict";

var progres = require('progres');
var Q = require('q');


// Monkey-patch ProgresClient with convenience methods.


progres.ProgresClient.prototype.queryGenerated = function (generated) {

	var THIS = this;

	// Wrap with Q().then to make exceptions work.
	return Q().then(function () {

		var SQLAndValues = generated.toQuery();

		return THIS.query(SQLAndValues.text, SQLAndValues.values);
	});
};


progres.ProgresClient.prototype.insert = function (tableDefinition, objectOrArray) {

	var THIS = this;

	return Q().then(function () {

		return THIS.queryGenerated(
			tableDefinition
				.insert(objectOrArray)
				.returning('*')
		).then(function (insertedRows) {

			// Return the single row when called with an
			// object, all rows when called with an array.
			return objectOrArray instanceof Array ?
				insertedRows : insertedRows[0];
		});
	});
};


progres.ProgresClient.prototype.select = function (tableDefinition, conditions, columnNames) {

	var THIS = this;

	var columns = columnNames.map(function (columnName) { return tableDefinition[columnName]; });

	return Q().then(function () {

		var queryObject = tableDefinition.select(columns.length ? columns : undefined);

		if (conditions) {

			queryObject = queryObject.where(conditions);
		}

		return THIS.queryGenerated(queryObject);
	});
};


progres.ProgresClient.prototype.selectOne = function (tableDefinition, conditions, columnNames) {

	return this
		.select(tableDefinition, conditions, columnNames)
		.then(function (rows) { return rows[0]; });
};


progres.ProgresClient.prototype.update = function (tableDefinition, conditions, object) {

	var THIS = this;

	return Q().then(function () {
	
		return THIS.queryGenerated(
			tableDefinition
				.update(object)
				.where(conditions)
				.returning('*')
		);
	});
};


progres.ProgresClient.prototype.upsert = function (tableDefinition, object, primaryKeyName) {

	var THIS = this;

	return this.insert(tableDefinition, object)
		.catch(function () {

			// If the primary key name isn't given, find it from the table definition.
			if (!primaryKeyName) {

				for (var i = 0; i < tableDefinition.columns.length; i++) {

					if (tableDefinition.columns[i].primaryKey) {

						primaryKeyName = tableDefinition.columns[i].name;
						break;
					}
				}

				throw new Error([
					'No primaryKeyName was specified, ',
					'and no column was marked as primaryKey.'
				].join(''));
			}

			var conditions = {};
			conditions[primaryKeyName] = object[primaryKeyName];

			return THIS
				.update(tableDefinition, conditions, object)
				.then(function (updatedRows) {

					// Make the resolved value consistent
					// with inserting a single object.
					return updatedRows[0];
				});
		});
};


progres.ProgresClient.prototype.delete = function (tableDefinition, conditions) {

	var THIS = this;

	return Q().then(function () {

		return THIS.queryGenerated(
			tableDefinition
				.delete()
				.where(conditions)
		);
	});
};


module.exports = progres;
