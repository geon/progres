'use strict';

var progres = require('progres');
var Q = require('q');


// Monkey-patch ProgresClient with convenience methods.


progres.ProgresClient.prototype.queryGenerated = function (generated) {

	var THIS = this;

	// Wrap with Q().then to make exceptions work.
	return Q().then(function () {

		var SQLAndValues = generated.toQuery();

		return THIS.query(SQLAndValues.text, SQLAndValues.values);
	});
};


progres.ProgresClient.prototype.insert = function (tableDefinition, objectOrArray) {

	var inputIsArray = objectOrArray instanceof Array;

	// It seems a bug in node-sql generates a select instead of insert when
	// no data is inserted, which gives a syntax error with RETURNING.
	if (inputIsArray && !objectOrArray.length) {

		return Q([]);
	}

	var THIS = this;

	return Q().then(function () {

		return THIS.queryGenerated(
			tableDefinition
				.insert(objectOrArray)
				.returning(tableDefinition.star())
		).then(function (insertedRows) {

			// Return the single row when called with an
			// object, all rows when called with an array.
			return inputIsArray
				? insertedRows
				: insertedRows[0];
		});
	});
};



progres.ProgresClient.prototype.select = function (tableDefinition, conditions) {

	var THIS = this;

	return Q().then(function () {

		var queryObject = tableDefinition.select();

		if (conditions) {

			queryObject = queryObject.where(conditions);
		}

		return THIS.queryGenerated(queryObject);
	});
};


progres.ProgresClient.prototype.selectOne = function (tableDefinition, conditions) {

	return this
		.select(tableDefinition, conditions)
		.then(function (rows) { return rows[0]; });
};


progres.ProgresClient.prototype.update = function (tableDefinition, conditions, object) {

	var THIS = this;

	return Q().then(function () {
	
		return THIS.queryGenerated(
			tableDefinition
				.update(object)
				.where(conditions)
				.returning(tableDefinition.star())
		);
	});
};


// I wanted an upsert method, but it is kind of tricky to get right.
// Better to not have a broken implementation.
// http://dba.stackexchange.com/questions/13468/most-idiomatic-way-to-implement-upsert-in-postgresql-nowadays


progres.ProgresClient.prototype.delete = function (tableDefinition, conditions) {

	var THIS = this;

	return Q().then(function () {

		return THIS.queryGenerated(
			tableDefinition
				.delete()
				.where(conditions)
				.returning(tableDefinition.star())
		);
	});
};


module.exports = progres;
