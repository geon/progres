'use strict';

var Q = require('q');
var progres = require('./index.js');
var sql = require('sql');

var usersTable = sql.define({
	name: 'progres_temp_test_users',
	columns: [
		{name: 'id', dataType: 'SERIAL PRIMARY KEY'},
		{name: 'name', dataType: 'TEXT'}
	]
});

var connectionString = 'postgres://localhost';

progres.connect(connectionString, function (client) {

	return [

		// A valid `node-sql` query object should return the resulting rows.
		function () {

			var value = 'passed';

			var generatedSQL = {toQuery: function () { return {
				text: 'SELECT $1::text AS column_name',
				values: [value]
			};}};

			return client.queryGenerated(generatedSQL).then(function (rows) {

				if (rows[0].column_name != value) {

					throw new Error('A valid `node-sql` query object should return the resulting rows.');
				}
			});
		},


		// Passing queryGenerated a broken object should propagate an error.
		function () {

			var brokenQueryObject = 'broken query object';

			// Run a broken query.
			return client.queryGenerated(brokenQueryObject).then(function () {

				// This should never execute.
				throw new Error('Passing queryGenerated a broken object should propagate an error.');

			}, function (error) {

				// Passed the test.
			})
		},


		// Prepare table.
		function () {

			// Drop.
			return client.queryGenerated(usersTable.drop().ifExists());
		},
		function () {

			// Create.
			return client.queryGenerated(usersTable.create());
		},


		// Inserting multiple should resolve with the inserted rows.
		function () {

			return client.insert(usersTable, [{name: 'geon'}, {name: 'neon'}]).then(function (insertedRows) {

				if (!(
					insertedRows.length == 2 &&
					insertedRows[0].id == 1 &&
					insertedRows[0].name == 'geon' &&
					insertedRows[1].id == 2 &&
					insertedRows[1].name == 'neon'
				)) {

					throw new Error('Inserting multiple should resolve with the inserted rows.');
				}
			})
		},

		// Inserting single should resolve with the inserted row.
		function () {

			return client.insert(usersTable, {name: 'geon-the-real-one'}).then(function (insertedRow) {

				if (!(
					insertedRow.length == undefined &&
					insertedRow.id == 3 &&
					insertedRow.name == 'geon-the-real-one'
				)) {

					throw new Error('Inserting single should resolve with the inserted row.');
				}
			})
		},

		// Deleting should remove the row.
		function () {

			return client.delete(usersTable, {id: 1}).then(function () {

				return client.selectOne(usersTable, {id: 1}).then(function (row) {

					if (row) {

						throw new Error('Deleting should remove the row.');
					}
				});
			})
		},

		// Update should resolve with the updated rows.
		function () {

			return client.update(usersTable, {id: 3}, {name: 'geon'}).then(function (updatedRows) {

				if (!(
					updatedRows.length == 1 &&
					updatedRows[0].id == 3 &&
					updatedRows[0].name == 'geon'
				)) {

					throw new Error('Update should resolve with the updated rows.');
				}
			})
		}
	]
		// Run in sequence.
		.reduce(function (soFar, next) { return soFar.then(next); }, Q());
})
	.done(function () {

		console.log('Everything OK.');

	}, function (error) {

		console.error(error);
		process.exit(1);
	});
