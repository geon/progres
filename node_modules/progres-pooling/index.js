'use strict';

var progres = require('progres');
var pg = require('pg');
var Q = require('q');


// Monkey-patch progres with connection pooling.


progres.connect = function (connectionString, job) {

	var deferred = Q.defer();

	// Connect.
	pg.connect(connectionString, function(error, postgresClient, done) {

		if (error) {

			deferred.reject(error);
			return;
		}

		// Do the job.
		var jobResult;
		try {

			jobResult = job(new progres.ProgresClient(postgresClient));

		} catch (error) {

			deferred.reject(error);
			return;
		}

		// The job should return a promise.
		if (!Q.isPromiseAlike(jobResult)) {

			var jobError = new Error([
				'A progres job callback returned a non-promise. ',
				'That can cause the database connection to close ',
				'before you are done using it. That is bad.'
			].join(''));
			jobError.jobResult = jobResult;

			deferred.reject(jobError);
			return;
		}

		deferred.resolve(jobResult.then(function (jobValue) {

			// Release connection back to pool.
			done();

			// Pass on the value.
			return jobValue;

		}, function (error) {

			// Release connection back to pool, with error.
			done(error);

			// Rethrow since it wasn't handled.
			throw error;
		}));
	});

	return deferred.promise;
};

module.exports = progres;
