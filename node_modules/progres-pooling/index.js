'use strict';

var progres = require('progres');
var pg = require('pg');
var Q = require('q');


// Monkey-patch progres with connection pooling.

progres.connectNoPool = progres.connect;
progres.connect = function (connectionString, job) {

	var deferred = Q.defer();

	// Connect.
	return Q.nbind(pg.connect, pg)(connectionString)
		.then(function(postgresClient, done) {

			// Do the job.
			var jobResult = job(new progres.ProgresClient(postgresClient));

			// The job should return a promise.
			if (!Q.isPromiseAlike(jobResult)) {

				var jobError = new Error([
					'A progres job callback returned a non-promise. ',
					'That can cause the database connection to close ',
					'before you are done using it. That is bad.'
				].join(''));
				jobError.jobResult = jobResult;

				throw jobError;
			}

			return jobResult
				.then(function (jobValue) {

					// Release connection back to pool.
					done();

					// Pass on the value.
					return jobValue;

				}, function (error) {

					// Release connection back to pool, with error.
					done(error);

					// Rethrow since it wasn't handled.
					throw error;
				});
		});
};

module.exports = progres;
